---
title: "Processing TCGA data"
format: html
editor: visual
---

## Loading libraries

```{r}
library(edgeR)
library(tibble)
library(statmod)
library(ggrepel)
library(dplyr)
```

The current code is processing the datasets obtained from the TCGA data retrieval file.

## Preprocessing of miRNA dataset

Selecting the columns with reads per million and editing the names. Names editing is required to make them matching the IDs of cancer and normal tissues in two lists, created in the TCGA_data_retrieval code (id_cancer_patients_cancer and id_cancer_patients_normal).

```{r}
miRNA_reads <- miRNA_data |>
  select(1, matches("reads_per_million")) 

columns_to_rename <- names(miRNA_reads)[-1]

# conversion of a pattern "TCGA-NH-A6GC-01A-12H-A41D-13" into "TCGA-NH-A6GC-01A-12H"
miRNA_reads <- miRNA_reads |>
  rename_at(columns_to_rename, ~substr(., nchar(.) - 27, nchar(.) - 8))
```

Creating a meta dataset that will indicate the tissue type for each of the TCGA IDs.

```{r}
metadata <- tibble(
  ID = c(id_cancer_patients_cancer, id_cancer_patients_normal),
  Status = c(rep("Cancer", length(id_cancer_patients_cancer)), 
             rep("Normal", length(id_cancer_patients_normal)))
)
```

Log2 transformation of data.

```{r}
miRNA_log <- miRNA_reads |>
  mutate(across(where(is.numeric), ~log2(. + 1)))
```

```{r}
miRNA_log
```

## edgeR

Subsetting the data into datasets necessary for edgeR processing.

```{r}
miRNA_ids <- miRNA_log[, 1]
expression_data <- miRNA_log[, -1]

# NA values were substituted with 0, as they cannot be normalised by calcNormFactors() function in edgeR
expression_data <- replace(expression_data, is.na(expression_data), 0)

# creating an edgeR object, with the counts and information on the genes (ID and length)
y <- DGEList(counts = expression_data, genes = miRNA_ids)

# normalization step
y <- calcNormFactors(y)
y$samples
```

Some of the samples that were requested by using the lists "id_cancer_patients" do not have expession data. The metadata that was composed from two lists should therefore be filtered to include the IDs that contain information about the expression.

```{r}
list <- colnames(expression_data)

metadata <- metadata |>
  filter(ID %in% list)
```

Creating a design matrix that will compare groups "Cancer" and "Normal" that are indicated in a column "Status" in a metadata dataframe.

```{r}
design <- model.matrix(~ Status, data = metadata)
rownames(design) <- y$samples[, 0]
```

In the next code chunk, the following actions are performed:

1\) **Estimation of a common dispersion (across all genes) and tagwise (gene-specific) dispersions**. It is recommended to do both, for a proper capturing of the variability in gene expression data. It leads to more reliable and biologically meaningful results when performing the differential gene expression analysis.

2\) **Fitting of a quasi-likelihood (QL) negative binomial model** to the data. It is designed for count data, which is encountered in RNA-seq experiments.

3\) Performance of a **quasi-likelihood F-test** on the fitted QL model. It allows to assess the significance of differences in gene expression between two conditions (cancer and normal tissues). F-test generates adjusted p-values to assess the significance of the changes in genes expression.

4\) **`topTags`** is used to **extract the top genes**, based on statistical significance from the results of a differential expression analysis. It takes the output of glmQLFTest and returns a list of top-ranked genes, based on the calculated values that indicate the significance.

```{r}
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design, robust = TRUE)
qlt <- glmQLFTest(fit)

topgenes <- topTags(qlt, n = dim(miRNA_reads)[[1]])
```

```{r}
subset_top <- topgenes$table |>
  arrange(desc(abs(logFC))) |>
  head(n = 25)

top_genes <- subset_top$genes
```

## Visualisation

```{r}
# choosing miRNAs of interest and pivoting miRNA_log table 
miRNA_log_long <- miRNA_log |>
  filter(miRNA_ID %in% top_genes) |>
  pivot_longer(
    cols = -miRNA_ID,
    names_to = "TCGA_ID",
    values_to = "log_reads"
  )
```

```{r}
# making the TCGA IDs column name in metadata matching the miRNA_log_long
colnames(metadata)[colnames(metadata) == "ID"] <- "TCGA_ID"
miRNA_log_long <- merge(miRNA_log_long, metadata, by="TCGA_ID")
```

```{r}
miRNA_log_long |>
  ggplot(aes(x = miRNA_ID,
             y = log_reads,
             col = Status)) +
  geom_point() +
  labs(title = "Comparison of expression of 25 top differentially expressed miRNAs \nbetween cancer and normal TCGA samples", color = "Tissue Type") +
  theme(axis.text.x = element_text(
    angle = 45,
    hjust = 1),
    plot.title = element_text(
      size = 12, 
      angle = 0)) 
```

```{r}
subset_top |>
  ggplot(aes(x = genes,
             y = logFC)) +
  geom_point() +
  geom_text_repel(aes(label = genes), size = 3) +
  theme(axis.text.x = element_text(
    angle = 45,
    hjust = 1)) +
  theme(axis.text.x = element_blank()) +
  labs(title = "Log fold changes of 25 mostly differentially expressed miRNAs", 
       x = "miRNA IDs",
       y = "log Fold Change")
```

```{r}
subset_top |>
  filter (genes == "hsa-let-7d")
```

## Working with mRNA dataset

Should be edited after obtaining a proper mRNA data from the previous code!

```{r}
RNA_1 <- read.delim("~/Desktop/DTU/R_for_bio_data_science/lab_10_Project/samples_mRNA_TCGA-COAD/TCGA-COAD/Transcriptome_Profiling/Gene_Expression_Quantification/6ecac4ca-88bc-421a-bdb6-ed0868b03e6c/f4535f36-11ce-4dd8-8337-5158b682d85c.rna_seq.augmented_star_gene_counts.tsv", comment.char="#")
```

```{r}
RNA_1 <- RNA_1 |>
  filter(substr(gene_id, 1, 4) == "ENSG")
```

```{r}
RNA1_sorted <- RNA_1 |> 
  arrange(desc(fpkm_uq_unstranded))
```

```{r}
RNA1_sorted |>
  slice_head(n = 100) |>
  mutate(Significance = ifelse(row_number() <= 15, "Yes", "No")) |>
  ggplot(aes(x = gene_name, 
             y = fpkm_uq_unstranded, 
             col = Significance)) +
  geom_point() + 
  labs(x = "RNA IDs",
       y = "FPKM-UQ reads",
       title = "RNA reads") +
  geom_text_repel(data = . %>% filter(Significance == "Yes"),
                  aes(label = gene_name)) +
  theme(legend.position = "none")
```
