---
title: "TCGA_data_retrieval"
format: html
editor: visual
---

Data page :

https://portal.gdc.cancer.gov/projects/TCGA-COAD

*analyte.tsv* and *clinical.tsv* was retrieved from the "Biospecimen" archive.

## Set Working directory

```{r setup}
own_path <- "/Users/mathildebechgaard"
knitr::opts_knit$set(root.dir = paste0(own_path, "/group_04_project/data/_raw/"))
```

## Loading libraries

```{r}
library(TCGAbiolinks)
library(tidyverse)
library(stringr)
```

Obtaining the IDs of the patients for whom the RNA expression was registered:

```{r}
analyte <- read.delim("analyte.tsv")

RNA_samples <- subset(analyte, analyte_type == "RNA")

RNA_samples <- RNA_samples |>
  mutate(tissue_type = str_sub(sample_submitter_id, -3, -3)) |>
  mutate(
    type = case_when(tissue_type == 0 ~ "cancer",
                     (tissue_type == 1 | tissue_type == 2) ~ "normal",
                     .default = "other")
  ) |>
  arrange(type)
```

## Creating a function to get the IDs of interest:

```{r}
get_sample_ids <- function(RNA_samples_data, sample_type, num_samples = 10) {

  filtered_samples <- RNA_samples_data |>
    filter(type == sample_type) |>
    head(num_samples)

  id_cancer_patients <- filtered_samples$analyte_submitter_id

  return(id_cancer_patients)
}
```

```{r}
id_cancer_patients_normal <- get_sample_ids(RNA_samples, sample_type = "normal", num_samples = 10)
id_cancer_patients_cancer <- get_sample_ids(RNA_samples, sample_type = "cancer", num_samples = 10)
id_cancer_patients <- c(id_cancer_patients_normal, id_cancer_patients_cancer)
```

## Creating a function to retrieve datasets from TCGA:

```{r}
retrieve_and_prepare_data <- function(
  project,
  data_category,
  data_type,
  workflow_type,
  id_cancer_patients,
  directory_prefix,
  use_prepare = TRUE
) {
  # Query to specify the data to get
  query <- GDCquery(
    project = project,
    data.category = data_category,
    data.type = data_type,
    workflow.type = workflow_type,
    barcode = id_cancer_patients
  )

  # Downloading the samples
  GDCdownload(
    query = query,
    method = "api",
    directory = paste0(directory_prefix, "_", project),
    files.per.chunk = 50
  )

  # Preparing data in case of miRNAs
  if (use_prepare) {
    data <- GDCprepare(query, directory = paste0(directory_prefix, "_", project))
  } else {
    data <- NULL
  }
  return(data)
}
```

```{r}
miRNA_data <- retrieve_and_prepare_data(
  project = "TCGA-COAD",
  data_category = "Transcriptome Profiling",
  data_type = "miRNA Expression Quantification",
  workflow_type = "BCGSC miRNA Profiling",
  id_cancer_patients = id_cancer_patients,
  directory_prefix = "samples_miRNA"
)
```

```{r}
mRNA_all <- retrieve_and_prepare_data(
  project = "TCGA-COAD",
  data_category = "Transcriptome Profiling",
  data_type = "Gene Expression Quantification",
  workflow_type = "STAR - Counts",
  id_cancer_patients = id_cancer_patients,
  directory_prefix = "samples_mRNA"
)
```

```{r}
print(citation("TCGAbiolinks"), bibtex=TRUE)
```

## Fetch miRNA metadataset

```{r}
miRNA_metadata <- read.delim("clinical.tsv")
```

## Clean up environment

```{r}
rm(get_sample_ids)
rm(retrieve_and_prepare_data)
rm(analyte)
rm(RNA_samples)
rm(id_cancer_patients)
rm(id_cancer_patients_cancer)
rm(id_cancer_patients_normal)
```

## Save data files

```{r}
saveRDS(miRNA_data, file = paste0(own_path, "/group_04_project/data/miRNA_data_load.RDS"))
saveRDS(miRNA_metadata, file = paste0(own_path, "/group_04_project/data/miRNA_metadata_load.RDS"))
saveRDS(mRNA_all, file = paste0(own_path, "/group_04_project/data/mRNA_all_load.RDS"))
```
