---
title: "TCGA_augment"
format: html
editor: visual
---

## Set Working directory

```{r setup}
own_path <- "/Users/kseniakirdey/Desktop/DTU/R_for_bio_data_science/lab_10_Project"
knitr::opts_knit$set(root.dir = paste0(own_path, "/group_04_project/data/"))
```

## Load Libraries

```{r}
library(edgeR)
library(tibble)
library(statmod)
library(tidyverse)
library(stringr)
```

## Fetch dataset

```{r}
miRNA_data <- readRDS(paste0(own_path, "/group_04_project/data/miRNA_data_clean.RDS"))
miRNA_metadata <- readRDS(paste0(own_path, "/group_04_project/data/miRNA_metadata_clean.RDS"))
```

Creating a meta dataset that will indicate the tissue type for each of the TCGA IDs:

1\) Extracting column names from the created `miRNA_data`.\
2) Identifying the tissue type by the ID numbering and defining the result as a metadata for the patients IDs.

```{r}
column_names <- colnames(miRNA_data)[-1]
IDs <- tibble(TCGA_ID = column_names)
```

```{r}
metadata_id_patients <- IDs |>
  mutate(tissue_type = str_sub(TCGA_ID, -3, -3)) |>
  mutate(
    Status = case_when(tissue_type == 0 ~ "cancer",
                     (tissue_type == 1 | tissue_type == 2) ~ "normal",
                     .default = "other")
  ) |>
  arrange(Status) |>
  select(-tissue_type)
```

## Preprocessing of miRNA dataset

Selecting the columns with reads per million and editing the names. Names editing is required to make them matching the IDs of cancer and normal tissues in two lists, created in the TCGA_data_retrieval code (id_cancer_patients_cancer and id_cancer_patients_normal).

Log2 transformation of the data.

```{r}
miRNA_log <- miRNA_data |>
  mutate(across(where(is.numeric), ~log2(. + 1)))
```

## edgeR

Subsetting the data into datasets necessary for edgeR processing.

```{r}
miRNA_ids <- miRNA_log[, 1]
expression_data <- miRNA_log[, -1]

# NA values were substituted with 0, as they cannot be normalised by calcNormFactors() function in edgeR
expression_data <- replace(expression_data, is.na(expression_data), 0)

# creating an edgeR object, with the counts and information on the genes (ID and length)
y <- DGEList(counts = expression_data, genes = miRNA_ids)

# normalization step
y <- calcNormFactors(y)
y$samples
```

Creating a design matrix that will compare groups "Cancer" and "Normal" that are indicated in a column "Status" in a metadata dataframe.

```{r}
design <- model.matrix(~ Status, data = metadata_id_patients)
rownames(design) <- y$samples[, 0]
```

In the next code chunk, the following actions are performed:

1\) **Estimation of a common dispersion (across all genes) and tagwise (gene-specific) dispersions**. It is recommended to do both, for a proper capturing of the variability in gene expression data. It leads to more reliable and biologically meaningful results when performing the differential gene expression analysis.

2\) **Fitting of a quasi-likelihood (QL) negative binomial model** to the data. It is designed for count data, which is encountered in RNA-seq experiments.

3\) Performance of a **quasi-likelihood F-test** on the fitted QL model. It allows to assess the significance of differences in gene expression between two conditions (cancer and normal tissues). F-test generates adjusted p-values to assess the significance of the changes in genes expression.

4\) **`topTags`** is used to **extract the top genes**, based on statistical significance from the results of a differential expression analysis. It takes the output of glmQLFTest and returns a list of top-ranked genes, based on the calculated values that indicate the significance.

```{r}
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design, robust = TRUE)
qlt <- glmQLFTest(fit)

topgenes <- topTags(qlt, n = dim(miRNA_data)[[1]])
```

Saving the statistics information about the differential expression into `top_genes_stat` and gene names into `top_genes` to fitler them in the miRNA dataset for the further analysis.

```{r}
top_genes_stat <- topgenes$table 
top_genes <- top_genes_stat$genes
```

```{r}
miRNA_log_long <- miRNA_log |>
  filter(miRNA_ID %in% top_genes) |>
  pivot_longer(
    cols = -miRNA_ID,
    names_to = "TCGA_ID",
    values_to = "log_reads"
  )
```

Merging expression information with the tissue types from `metadata_id_patients`.

```{r}
miRNA_log_long <- merge(miRNA_log_long, metadata_id_patients, by="TCGA_ID")
miRNA_log_long <- miRNA_log_long |>
  mutate(TCGA_ID = str_sub(TCGA_ID, 1, 12))
```

Finally, merging with long data with the clinical information from the `miRNA_metadata` for the further analysis.

```{r}
miRNA_metadata <- miRNA_metadata |>
  rename(TCGA_ID = case_submitter_id) |>
  mutate(TCGA_ID = str_sub(TCGA_ID, 1, 12))

miRNA_log_long_full <- merge(miRNA_log_long, miRNA_metadata, by="TCGA_ID")
```

## Clean up environment

```{r}
rm(design)
rm(expression_data)
rm(fit)
rm(IDs)
rm(metadata_id_patients)
rm(miRNA_data)
rm(miRNA_log)
rm(miRNA_log_long)
rm(miRNA_metadata)
rm(qlt)
rm(top_genes)
rm(y)
rm(topgenes)
rm(column_names)
rm(miRNA_ids)
```

## Saving datasets for analysing

```{r}
saveRDS(miRNA_log_long_full, file = paste0(own_path, "/group_04_project/data/miRNA_log_long_full.RDs"))
saveRDS(top_genes_stat, file = paste0(own_path, "/group_04_project/data/top_genes_stat.RDs"))
```
