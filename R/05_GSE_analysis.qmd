---
title: "GSE_gse_results_analysis"
output:
  html_document:
    toc: true
output_dir: "C:/Users/Konrad/Documents/group_04_project/Doc"
---

```{r setup}
own_path <- "/Users/mathildebechgaard/"
knitr::opts_knit$set(root.dir = paste0(own_path, "group_04_project/data/"))
```

## Libraries

```{r}
library(tidyverse)
library(limma)
library(ggrepel)
```

## Loading gse_results

```{r}
exp_gse_results <- readRDS(paste0(own_path, "group_04_project/data/gse_expressed_data.RDs"))
mirna_exp <- readRDS(paste0(own_path, "group_04_project/data/gse_all_data.RDs"))
```

## GSE analysis

At first only necessary rows with gene_id and gse_results were selected. Then log2 transformation was done, with omitting negative values and 0's. Also box-plot is generated to see, whether data looks normalized or not

```{r}
exp_gse_results <- replace(exp_gse_results, exp_gse_results <= 0, NaN)

exp_log <- log2(exp_gse_results) # log2 transform

exp_log <- normalizeBetweenArrays(exp_log) # normalize gse_results

exp_log  <- exp_log [complete.cases(exp_log), ]

# boxplot generated as check if data is normalized, could not be done with ggplot
boxplot(exp_log, outline = FALSE,
        main = "Boxplot of Exosomal miRNA in Colorectal Samples",
        xlab = "", ylab = "Log2")
```

Next a matrix for our experiment was created, with first 11 samples being "Normal" and rest as "Tumor" group

```{r}
design <- data.frame(
  Normal = c(rep(1, 11), rep(0, 88)),
  Tumor = c(rep(0, 11), rep(1, 88))
)

design <- as.matrix(design)
```

Adfterwards we will cut off genes that are not expressed in more 1/3 of our samples

```{r}
cutoff <- median(exp_log)

is_expressed <- exp_log > cutoff

keep <- rowSums(is_expressed) > 33

diff_expressed_genes <- exp_log[keep, ]
```

Then we have to fit linear model and to make 2 subgroups - Tumor and Normal, and perform *empirical Bayes'*Â step to get statistics and p-values.

```{r}
fit <- lmFit(diff_expressed_genes, design)

contrasts <- makeContrasts(Tumor - Normal, levels=design)

fit2 <- contrasts.fit(fit, contrasts)

fit2 <- eBayes(fit2)

topTable(fit2)
```

Now, we will check which test we have to perform for our dataset.

```{r}
decideTests(fit2)

table(decideTests(fit2))
```

We create array weights to fit our data into model, and once again apply *empirical Bayes' step*

```{r}
aw <- arrayWeights(diff_expressed_genes, design)

fit <- lmFit(diff_expressed_genes, design, cweights = aw)

contrasts <- makeContrasts(Tumor - Normal, levels=design)

fit2 <- contrasts.fit(fit, contrasts)

fit2 <- eBayes(fit2)

full_results <- topTable(fit2, number=Inf)
```

Results of our analysis are added to the data set and volcano plot was generated to show Diferentially Expressed genes.

```{r}
full_results <- full_results |>
  tibble::rownames_to_column(var = "ID")

gse_results <- mirna_exp |>
  tibble::rownames_to_column(var = "ID") |>
  full_join(full_results, by = "ID")


gse_results$diffexpressed <- "NO"

gse_results$diffexpressed[gse_results$logFC > 1 & gse_results$adj.P.Val < 0.05] <- "UP"
gse_results$diffexpressed[gse_results$logFC < -1 & gse_results$adj.P.Val < 0.05] <- "DOWN"

gse_results$label <- NA
gse_results$label[gse_results$diffexpressed != "NO"] <- gse_results$GENE_NAME[gse_results$diffexpressed != "NO"] 

# Generate the plot with labels that avoid overlapping
gse_vol <- ggplot(data = gse_results, aes(x = logFC,
                               y = -log10(P.Value), 
                               col = diffexpressed, 
                               label = label)) + 
  geom_point(alpha = 0.5) +
  scale_color_manual(values = c("UP" = "red", 
                                "DOWN" = "blue", 
                                "NO" = "gray"),
                     name = "Type of genes regulation") +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "black") +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "black") +
  geom_text_repel(data = subset(gse_results, 
                                diffexpressed != "NO"), 
                  aes(label = label), 
                  box.padding = unit(0.2, "lines")) +
  labs(title = "Differential Gene Expression in Colorectal Cancer", 
       x = "log2 Fold Change", 
       y = "-log10(adj.P.Value)", 
       col = "Differential Expression")

print(gse_vol)
```

As the last step a file of only highly expressed genes is generated for merging purposes, and to create top 20 over expressed genes as an expression file

```{r}
high_expressed_genes <- gse_results |>
  filter(abs(logFC) > 1) |>
  filter(adj.P.Val < 0.05)

top_20_genes <- high_expressed_genes |>
  arrange(desc(abs(logFC))) |>
  slice_head(n = 20) |>
  mutate(miRNA_ID = ifelse(duplicated(miRNA_ID), 
                           paste0(miRNA_ID, "*"), 
                           miRNA_ID)) |>
  column_to_rownames(var = "miRNA_ID") |>
  select(starts_with("GS"))
```

## Saving Files

```{r}
saveRDS(gse_results, file = paste0(own_path, "group_04_project/results/gse_results.rds"))
saveRDS(high_expressed_genes, file = paste0(own_path, "group_04_project/results/gse_expressed_genes.rds"))
saveRDS(top_20_genes, file = paste0(own_path, "group_04_project/results/gse_top_20.rds"))
saveRDS(top_20_genes, file = paste0(own_path, "group_04_project/results/gse_top_20.rds"))
ggsave(file = paste0(own_path, "group_04_project/results/images/gse_vol_plot.png"), plot = gse_vol, width = 14, height = 8.4, units = "in")
```

## Deleting files

```{r}
rm(list = ls())
```
