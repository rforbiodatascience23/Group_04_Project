---
title: "Presentation"
author: "Group 4"
format:
  revealjs:
    embed-resources: true
    incremental: true 
    theme: solarized
    slide-number: c/t
    width: 1600
    height: 900
    footer: R for Bio Data Science
---

## Introduction

![](images/Introduction%20-%20Article.png){fig-align="center"}

-   CRC has the 3^rd^ highest mortality rate

-   More effective methods to detect CRC are needed

-   Correlation between exosomes and tumorigenesis

-   miRNA and mRNA can serve as biomarkers - these we want to find!

## Data retrieval - GSE

-   Using the library GEOquery, the data was loaded -\> no need to download any files

-   Both primary data and meta data was loaded

-   Data was already standardized

## Data description - GSE

Hi

## Data analysis - GSE

-   Log2 Transformation:
    -   Log2 transformation was performed for the analysis of differentially expressed genes.
    -   Data points below 0 were removed and converted to NaN.
-   Design Matrix for Tumor vs Normal Comparison:
    -   A design matrix was created for the Tumor vs Normal comparison.
    -   The first 11 samples were allocated to Normal, and the rest were considered as Tumor.
-   Limit Expressed Genes Based on Median Expression:
    -   Only genes with above-median expression in 1/3 of the samples were retained.
-   Linear Model Fitting and Contrasts:
    -   A linear model was fitted.
    -   Contrasts were created between the two groups (Tumor and Normal).
    -   Empirical Bayes' step was performed to obtain statistics and p-values.

## 

-   Array Weights for Model Fitting:
    -   An array of weights was created to fit the data into the model.
-   Empirical Bayes' Step (Again):
    -   The empirical Bayes' step was applied again with the array weights.
-   Results Integration and Volcano Plotting:
    -   Results of the analysis were added to the dataset.
    -   Additional columns were created for volcano plotting:
        -   'diffexpressed' with values: NO, UP, and DOWN.
        -   'label' with GENE_ID's of overexpressed genes.
-   File Generation for Highly Expressed Genes:
    -   A file containing only highly expressed genes was generated for merging purposes.
-   Top 20 Overexpressed Genes Expression File:
    -   A file containing expression data for the top 20 overexpressed genes was generated.

## Data retrieval - TCGA (Mathilde)

-   Setting path to /TCGA_data/\_raw folder

    -   analyte.tsv & clinical.tsv

    -   Obtain IDs of the patients for whom the RNA expression was registered

-   Library ***TCGABiolinks*** is used to retrieve data from the GDC data portal

-   Retrieve and prepare function with GDCquery and GDCdownload

```{r}
#| eval: false
#| echo: false
retrieve_and_prepare_data <- function(
  project,
  data_category,
  data_type,
  workflow_type,
  id_cancer_patients,
  directory_prefix,
  use_prepare = TRUE
) {
  # Query to specify the data to get
  query <- GDCquery(
    project = project,
    data.category = data_category,
    data.type = data_type,
    workflow.type = workflow_type,
    barcode = id_cancer_patients
  )

  # Downloading the samples
  GDCdownload(
    query = query,
    method = "api",
    directory = paste0(directory_prefix, "_", project),
    files.per.chunk = 50
  )

  # Preparing data in case of miRNAs
  if (use_prepare) {
    data <- GDCprepare(query, directory = paste0(directory_prefix, "_", project))
  } else {
    data <- NULL
  }
  return(data)
}
```

## Data retrieval - TCGA (Mathilde)

-   Fetch miRNA data:

```{r}
#| eval: false
#| echo: false
miRNA_data_cancer <- retrieve_and_prepare_data(
  project = "TCGA-COAD",
  data_category = "Transcriptome Profiling",
  data_type = "miRNA Expression Quantification",
  workflow_type = "BCGSC miRNA Profiling",
  id_cancer_patients = id_cancer_patients_cancer,
  directory_prefix = "samples_miRNA"
)
```

-   Fetch mRNA data:

```{r}
#| eval: false
#| echo: false
mRNA_all <- retrieve_and_prepare_data(
  project = "TCGA-COAD",
  data_category = "Transcriptome Profiling",
  data_type = "Gene Expression Quantification",
  workflow_type = "STAR - Counts",
  id_cancer_patients = id_cancer_patients,
  directory_prefix = "samples_mRNA"
)
```

-   Files were saved to TCGA_data/

## Data tidying - TCGA (Mathilde)

-   miRNA data:

Picture instead

```{r}
#| eval: false
#| echo: false
miRNA_data <- readRDS("/Users/mathildebechgaard/group_04_project/TCGA_data/miRNA_data_load.RDS")
miRNA_data
```

```{r}
#| eval: false
#| echo: false
miRNA_metadata <- readRDS("/Users/mathildebechgaard/group_04_project/TCGA_data/miRNA_metadata_load.RDS")
miRNA_metadata
```

## Data tidying - TCGA (Mathilde)

-   mRNA data:

Picture instead

```{r}
#| eval: false
#| echo: false
mRNA_all <- readRDS("/Users/mathildebechgaard/group_04_project/TCGA_data/mRNA_all_load.RDS")
mRNA_all
```

-   Library ***SummarizedExperiment***

```{r}
#| eval: false
#| echo: false
mRNA_data <- as.data.frame(assay(mRNA_all))
mRNA_data
```

```{r}
#| eval: false
#| echo: false
mRNA_metadata <- as.data.frame(colData(mRNA_all))
mRNA_metadata
```

## Data description - TCGA (Mathilde)

-   Number og Cancer vs. Normal Samples

![](images/cancer_vs_normal.png){fig-align="center"}

## Data description - TCGA (Mathilde)

-   Gender distribution

![](images/gender_distribution.png){fig-align="center" width="477"}

## Data description - TCGA (Mathilde)

-   Cancer stages

![](images/cancer_stages.png){fig-align="center" width="473"}

## Data preprocess - TCGA (Ksenia)

#### Pre-processing

```{r}
library(tibble)
```

```{r}
#| eval: false
#| echo: false
own_path <- "/Users/mathildebechgaard/"
knitr::opts_knit$set(root.dir = paste0(own_path, "/group_04_project/TCGA_data/"))
```

<font size="6">

-   Creating metadata for patients ID (TCGA \# - Tissue Status) for mRNAs and miRNAs.
-   Log2 transformation of two datasets and adjustment of the organizations. For them to have the same style of a **tidy data**: rows = gene names, columns = patients ID, value = expression data.

</font>

```{r}
#| eval: true
#| echo: false
own_path <- "/Users/mathildebechgaard/"
miRNA_data <- readRDS(paste0(own_path, "/group_04_project/TCGA_data/miRNA_expression.RDS"))
mRNA_data <- readRDS(paste0(own_path, "/group_04_project/TCGA_data/mRNA_expression.RDS"))

print(miRNA_data)
```

```{r}
#| eval: true
#| echo: false
print(mRNA_data)
```

## Data augmentation - TCGA

#### edgeR

<font size="6">

-   Calculation of the normalization factors for the data (\_log) with `calcNormFactors` and imputation of NAs using means.

-   Creating a uniform edgeR analysis function.

</font>

```{css, echo=FALSE}
.my_class1 {
height: 300px;
width: 1000px;
}
```

```{r}
#| class-source: my_class1
#| classes: my_class1
#| eval: false
#| echo: false
run_edgeR_analysis <- function(data_y,
                               design_formula,
                               metadata,
                               feature_data) {
  
  design <- model.matrix(as.formula(design_formula),
                         data = metadata)

  # Set row names
  rownames(design) <- data_y$samples[, 0]
  
  # Set row names
  rownames(design) <- data_y$samples[, 0]

  # Estimate dispersion
  data_y <- estimateDisp(data_y, design)

  # Fit model
  fit <- glmQLFit(data_y, design, robust = TRUE)

  # Likelihood ratio test
  qlt <- glmQLFTest(fit)

  # Getting top genes and saving table in the variable.
  # The dimension of the original dataset is applied.
  topgenes <- topTags(qlt, n = dim(feature_data)[[1]])

  return(topgenes)
}
```

## Data augmentation - TCGA

#### edgeR

Example of usage:

```{r}
#| eval: false
#| echo: false
run_edgeR_analysis(mRNA_y, "~ Status", metadata_id_patients_mRNA, mRNA_data)
```

Statistics table:

```{r}
#| eval: true
#| echo: false
miRNA_top_genes_stat <- readRDS("/Users/mathildebechgaard/group_04_project/TCGA_data/miRNA_top_genes_stat.RDS") |> tibble()
miRNA_top_genes_stat
```

## 

## Results (All)

```{r}

```

## Conclusions (All)

**article suck ass**
